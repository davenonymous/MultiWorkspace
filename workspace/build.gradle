buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven { // Patchouli
        url "https://maven.blamejared.com"
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
    maven { // TOP
        url "https://cursemaven.com"
    }
    maven { url 'https://jitpack.io' }
}

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "${mappings_type}", version: "${mappings_version}"

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                libnonymous {
                    source project(':libnonymous').sourceSets.main
                }
                bonsaitrees3 {
                    source project(':BonsaiTrees').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                libnonymous {
                    source project(':libnonymous').sourceSets.main
                }
                bonsaitrees3 {
                    source project(':BonsaiTrees').sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // args '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            args '--all', '--mod', 'libnonymous', '--mod', 'bonsaitrees3', '--output', file('src/generated/resources/'), '--existing', project(':BonsaiTrees').sourceSets.main.resources.srcDirs[0]

            mods {
                libnonymous {
                    source project(':libnonymous').sourceSets.main
                }
                bonsaitrees3 {
                    source project(':BonsaiTrees').sourceSets.main
                }
            }
        }
    }
}

jar {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    // Minecraft
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Mixins
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Libnonymous
    // implementation fg.deobf("com.davenonymous.libnonymous:libnonymous:${mc_version}-${libnonymous_version}")

    // Just Enough Items API
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")

    // The One Probe
    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_fileid}")

    // Jade
    implementation fg.deobf("curse.maven:jade-324717:${jade_fileid}-api-sources")


    // Runtime Only

    // Just Enough Items
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Configured
    runtimeOnly fg.deobf("curse.maven:configured-457570:${configured_fileid}")

    // Spark
    runtimeOnly fg.deobf("curse.maven:spark-361579:${spark_fileid}")

    // Biomes O' Plenty
    runtimeOnly fg.deobf("curse.maven:biomes-o-plenty-220318:${bop_fileid}")

    // Oh The Biomes You'll Go
    runtimeOnly fg.deobf("curse.maven:oh-the-biomes-youll-go-247560:${byg_fileid}")

    // TerraBlender
    runtimeOnly fg.deobf("curse.maven:terrablender-563928:${terrablender_fileid}")

    // GeckoLib
    runtimeOnly fg.deobf("curse.maven:geckolib-388172:${geckolib_fileid}")

    // CorgiLib
    runtimeOnly fg.deobf("curse.maven:corgilib-693313:${corgilib_fileid}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}